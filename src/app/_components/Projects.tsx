import CardCarousel from "@/components/CardCarousel";
import { Project } from "@/interfaces/Projects";
import supabaseServer from "@/supabase/config";
import { QueryData, QueryError } from "@supabase/supabase-js";
import { ReactElement, ReactNode } from "react";
import Image from "next/image";
import { Card, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card";
import { ChevronDown } from "lucide-react";
import { Framework } from "@/interfaces/Frameworks";
import Link from "next/link";

export default async function Projects(): Promise<ReactElement | undefined> {
  const query = supabaseServer().from("projects").select("*, frameworks (*)").eq("id", 1);
  const { data, error }: { data: QueryData<typeof query> | null; error: QueryError | null } = await query;

  if (error) {
    throw error;
  }

  if (data) {
    return (
      <div className="mx-[0.5rem] mt-[3rem] flex max-w-[100rem] flex-col gap-4 md:mx-[8rem] md:mt-[8rem] lg:mx-[14rem] 2xl:mx-[20rem]">
        <h3 className="text-xl font-bold text-primary md:text-2xl">Projects</h3>
        {data.map((project: Project, index: number) => {
          return (
            <div key={index}>
              <Project project={project} />
            </div>
          );
        })}
      </div>
    );
  }
}

type ProjectProps = {
  project: Project;
};

const Project = ({ project }: ProjectProps): ReactElement => {
  const createImageCards = (project: Project): ReactNode[] => {
    const imageCards: ReactNode[] = [];

    project.images.forEach((image: string) => {
      imageCards.push(
        <div className="relative h-44 w-full sm:h-64">
          <Image
            className="origin-center rounded-lg"
            priority={true}
            fill={true}
            sizes="100vw, 100vh"
            src={image}
            alt={project.name}
          />
        </div>,
      );
    });

    return imageCards;
  };

  return (
    <div className="flex flex-col items-center gap-4 p-4 xl:flex-row">
      <div className="w-[18rem] sm:w-[28rem]">
        <CardCarousel cards={createImageCards(project)} />
      </div>
      <div className="relative flex flex-1 flex-col items-center">
        <Card className="flex flex-1 flex-col justify-between shadow-sm shadow-primary hover:shadow-md hover:shadow-primary dark:bg-black">
          <CardHeader className="px-6 py-4">
            <CardTitle className="text-lg lg:text-3xl">{project.name}</CardTitle>
            <CardDescription className="text-[0.7em] font-semibold md:text-[0.9em]">
              {project.description}
            </CardDescription>
          </CardHeader>
          <CardFooter className="flex w-full justify-end gap-2">
            <GithubFramework project={project} />
            <HostFramework project={project} />
          </CardFooter>
        </Card>
        <FrameworksDropdown frameworks={project.frameworks} />
      </div>
    </div>
  );
};

const HostFramework = ({ project }: ProjectProps): ReactElement | undefined => {
  if (project.host.length > 0) {
    return (
      <Link href={project.host}>
        <svg
          version="1.1"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 122.88 90.04"
          className="size-6 fill-primary/90 stroke-black lg:size-8 dark:fill-primary/90 dark:stroke-primary"
        >
          <g>
            <path d="M2.08,26.62H74.4c1.14,0,2.08,0.94,2.08,2.08v47.91c0,1.14-0.93,2.08-2.08,2.08H2.08 C0.94,78.69,0,77.75,0,76.61V28.7C0,27.56,0.94,26.62,2.08,26.62L2.08,26.62L2.08,26.62z M107.74,45.86h-2.82v-5.64h2.82l0.25,5.64 H107.74z M38.37,19.06h-2.82v-5.64h2.82V19.06L38.37,19.06z M36.83,10.6h-1.28V9.32V7.91h1.41h4.36v2.82h-4.36L36.83,10.6 L36.83,10.6z M44.14,10.73V7.91h5.64v2.82H44.14L44.14,10.73z M52.61,10.73V7.91h5.64v2.82H52.61L52.61,10.73z M61.07,10.73V7.91 h5.64v2.82H61.07L61.07,10.73z M69.54,10.73V7.91h5.64v2.82H69.54L69.54,10.73z M78,10.73V7.91h5.64v2.82H78L78,10.73z M85.84,68.41h4.94v-2.82h-4.94l0.25,2.82H85.84z M93.6,68.41v-2.82h5.64v2.82h-5.4H93.6z M102.07,68.41v-2.82h4.26v0.03h1.41V67 v1.41h-1.41H102.07L102.07,68.41z M107.74,62.79h-2.82v-5.64h2.82l0.25,5.64H107.74z M107.74,54.33h-2.82v-5.64h2.82l0.25,5.64 H107.74z M119.24,24.3c0.05,0,0.1,0,0.14,0.01c0.31-0.54,0.59-1.11,0.85-1.71c0.01-0.01,0.01-0.02,0.02-0.03 c0.38-0.91,0.68-1.85,0.87-2.83c0.15-0.76,0.25-1.53,0.28-2.33h-4.58c-0.08,2.33-0.78,4.62-2.07,6.88L119.24,24.3L119.24,24.3 L119.24,24.3z M118.44,25.76h-4.61c-1.4,2.03-3.29,4.03-5.65,6.01c0.37-0.05,0.74-0.11,1.1-0.18c0.99-0.2,1.94-0.49,2.86-0.89 c0.93-0.4,1.8-0.87,2.61-1.41c0.81-0.54,1.55-1.15,2.24-1.84C117.52,26.92,118.01,26.36,118.44,25.76L118.44,25.76L118.44,25.76z M104.24,31.77c-2.36-1.98-4.25-3.98-5.65-6.01h-4.61c0.44,0.6,0.93,1.16,1.46,1.69c0.69,0.69,1.43,1.3,2.24,1.84 c0.8,0.54,1.67,1.01,2.61,1.41c0.01,0.01,0.02,0.01,0.03,0.02c0.91,0.38,1.85,0.68,2.83,0.87c0.36,0.07,0.73,0.13,1.1,0.18H104.24 L104.24,31.77z M93.01,24.3h4.64c-1.29-2.26-1.99-4.56-2.07-6.88H91c0.04,0.8,0.13,1.57,0.28,2.33c0.2,0.99,0.49,1.94,0.89,2.86 C92.42,23.2,92.7,23.76,93.01,24.3L93.01,24.3z M91,15.95h4.61c0.17-2.28,0.93-4.57,2.28-6.88h-4.88c-0.31,0.54-0.59,1.1-0.84,1.69 c-0.01,0.01-0.01,0.02-0.02,0.03c-0.38,0.91-0.68,1.85-0.87,2.83C91.13,14.38,91.03,15.15,91,15.95L91,15.95z M93.96,7.61h4.87 c1.39-2,3.22-4.01,5.5-6.03c-0.41,0.05-0.81,0.11-1.2,0.19c-0.99,0.2-1.94,0.49-2.86,0.89c-0.93,0.4-1.8,0.87-2.61,1.41 c-0.81,0.54-1.55,1.15-2.24,1.84C94.89,6.43,94.4,6.99,93.96,7.61L93.96,7.61L93.96,7.61z M108.06,1.57 c2.29,2.02,4.12,4.03,5.5,6.03h4.87c-0.44-0.6-0.93-1.16-1.46-1.69c-0.69-0.69-1.43-1.3-2.24-1.84c-0.8-0.54-1.67-1.01-2.61-1.41 c-0.01-0.01-0.02-0.01-0.03-0.02c-0.91-0.38-1.85-0.68-2.83-0.87C108.86,1.69,108.46,1.63,108.06,1.57L108.06,1.57L108.06,1.57z M119.39,9.07h-4.88c1.35,2.31,2.11,4.6,2.28,6.88h4.61c-0.04-0.8-0.13-1.57-0.28-2.33c-0.2-0.99-0.49-1.94-0.89-2.86 C119.98,10.17,119.7,9.61,119.39,9.07L119.39,9.07L119.39,9.07z M102.85,0.33c1.08-0.22,2.2-0.33,3.35-0.33 c1.15,0,2.26,0.11,3.35,0.33c1.07,0.21,2.1,0.53,3.11,0.96c0.01,0,0.03,0.01,0.04,0.02c1,0.43,1.95,0.95,2.84,1.54 c0.89,0.59,1.71,1.27,2.46,2.02c0.76,0.75,1.43,1.57,2.02,2.46c0.6,0.89,1.11,1.84,1.54,2.84c0.44,1.02,0.76,2.07,0.98,3.15 c0.22,1.08,0.33,2.2,0.33,3.35c0,1.15-0.11,2.26-0.33,3.35c-0.21,1.07-0.53,2.1-0.96,3.11c0,0.01-0.01,0.03-0.02,0.04 c-0.43,1.01-0.95,1.95-1.54,2.84c-0.59,0.89-1.27,1.71-2.02,2.46c-0.75,0.76-1.57,1.43-2.46,2.02c-0.89,0.6-1.84,1.11-2.84,1.54 c-1.02,0.44-2.07,0.76-3.15,0.98c-1.08,0.22-2.2,0.33-3.35,0.33c-1.15,0-2.26-0.11-3.35-0.33c-1.07-0.21-2.1-0.53-3.11-0.96 c-0.01,0-0.03-0.01-0.04-0.02c-1-0.43-1.95-0.95-2.84-1.54c-0.89-0.59-1.71-1.27-2.46-2.02c-0.76-0.75-1.43-1.57-2.02-2.46 c-0.6-0.89-1.11-1.84-1.54-2.84c-0.44-1.02-0.76-2.07-0.98-3.15c-0.22-1.08-0.33-2.2-0.33-3.35c0-1.15,0.11-2.26,0.33-3.35 c0.21-1.07,0.53-2.1,0.96-3.11c0-0.01,0.01-0.03,0.02-0.04c0.43-1.01,0.95-1.95,1.54-2.84c0.59-0.89,1.27-1.71,2.02-2.46 c0.75-0.76,1.57-1.43,2.46-2.02c0.89-0.6,1.84-1.11,2.84-1.54C100.71,0.87,101.77,0.55,102.85,0.33L102.85,0.33z M106.93,2.52v5.08 h4.84C110.5,5.92,108.89,4.23,106.93,2.52L106.93,2.52z M106.93,9.07v6.88h8.4c-0.19-2.26-1.03-4.55-2.53-6.88H106.93L106.93,9.07z M106.93,17.41v6.88h6.11c1.45-2.28,2.22-4.57,2.31-6.88H106.93L106.93,17.41z M106.93,25.76v5.14c2.07-1.7,3.77-3.42,5.09-5.14 H106.93L106.93,25.76z M105.47,30.9v-5.14h-5.09C101.69,27.48,103.39,29.2,105.47,30.9L105.47,30.9z M105.47,24.3v-6.88h-8.43 c0.09,2.31,0.87,4.6,2.31,6.88H105.47L105.47,24.3z M105.47,15.95V9.07H99.6c-1.5,2.33-2.34,4.62-2.53,6.88H105.47L105.47,15.95z M105.47,7.61V2.52c-1.96,1.71-3.57,3.4-4.84,5.08H105.47L105.47,7.61z M28.81,81.56h18.86c0.05,3.26,1.39,6.18,5.03,8.48H23.78 C26.69,87.93,28.82,85.36,28.81,81.56L28.81,81.56L28.81,81.56z M38.24,71.68c1.47,0,2.67,1.2,2.67,2.67c0,1.47-1.2,2.67-2.67,2.67 c-1.47,0-2.67-1.2-2.67-2.67C35.57,72.88,36.76,71.68,38.24,71.68L38.24,71.68z M6.25,30.54h63.97c1.01,0,1.84,0.83,1.84,1.84v35.8 c0,1.01-0.83,1.84-1.84,1.84H6.25c-1.01,0-1.84-0.83-1.84-1.84v-35.8C4.41,31.36,5.24,30.54,6.25,30.54L6.25,30.54L6.25,30.54z" />
          </g>
        </svg>
      </Link>
    );
  }
};

const GithubFramework = ({ project }: ProjectProps): ReactElement | undefined => {
  if (project.github.length > 0) {
    return (
      <Link href={project.github}>
        <svg
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 50 50"
          className="size-6 fill-black stroke-primary lg:size-8 dark:fill-primary dark:stroke-none"
        >
          <path d="M 25 2 C 12.311335 2 2 12.311335 2 25 C 2 37.688665 12.311335 48 25 48 C 37.688665 48 48 37.688665 48 25 C 48 12.311335 37.688665 2 25 2 z M 25 4 C 36.607335 4 46 13.392665 46 25 C 46 25.071371 45.994849 25.141688 45.994141 25.212891 C 45.354527 25.153853 44.615508 25.097776 43.675781 25.064453 C 42.347063 25.017336 40.672259 25.030987 38.773438 25.125 C 38.843852 24.634651 38.893205 24.137377 38.894531 23.626953 C 38.991361 21.754332 38.362521 20.002464 37.339844 18.455078 C 37.586913 17.601352 37.876747 16.515218 37.949219 15.283203 C 38.031819 13.878925 37.910599 12.321765 36.783203 11.269531 L 36.494141 11 L 36.099609 11 C 33.416539 11 31.580023 12.12321 30.457031 13.013672 C 28.835529 12.386022 27.01222 12 25 12 C 22.976367 12 21.135525 12.391416 19.447266 13.017578 C 18.324911 12.126691 16.486785 11 13.800781 11 L 13.408203 11 L 13.119141 11.267578 C 12.020956 12.287321 11.919778 13.801759 11.988281 15.199219 C 12.048691 16.431506 12.321732 17.552142 12.564453 18.447266 C 11.524489 20.02486 10.900391 21.822018 10.900391 23.599609 C 10.900391 24.111237 10.947969 24.610071 11.017578 25.101562 C 9.2118173 25.017808 7.6020996 25.001668 6.3242188 25.046875 C 5.3845143 25.080118 4.6454422 25.135713 4.0058594 25.195312 C 4.0052628 25.129972 4 25.065482 4 25 C 4 13.392665 13.392665 4 25 4 z M 14.396484 13.130859 C 16.414067 13.322043 17.931995 14.222972 18.634766 14.847656 L 19.103516 15.261719 L 19.681641 15.025391 C 21.263092 14.374205 23.026984 14 25 14 C 26.973016 14 28.737393 14.376076 30.199219 15.015625 L 30.785156 15.273438 L 31.263672 14.847656 C 31.966683 14.222758 33.487184 13.321554 35.505859 13.130859 C 35.774256 13.575841 36.007486 14.208668 35.951172 15.166016 C 35.883772 16.311737 35.577304 17.559658 35.345703 18.300781 L 35.195312 18.783203 L 35.494141 19.191406 C 36.483616 20.540691 36.988121 22.000937 36.902344 23.544922 L 36.900391 23.572266 L 36.900391 23.599609 C 36.900391 26.095064 36.00178 28.092339 34.087891 29.572266 C 32.174048 31.052199 29.152663 32 24.900391 32 C 20.648118 32 17.624827 31.052192 15.710938 29.572266 C 13.797047 28.092339 12.900391 26.095064 12.900391 23.599609 C 12.900391 22.134903 13.429308 20.523599 14.40625 19.191406 L 14.699219 18.792969 L 14.558594 18.318359 C 14.326866 17.530484 14.042825 16.254103 13.986328 15.101562 C 13.939338 14.14294 14.166221 13.537027 14.396484 13.130859 z M 8.8847656 26.021484 C 9.5914575 26.03051 10.40146 26.068656 11.212891 26.109375 C 11.290419 26.421172 11.378822 26.727898 11.486328 27.027344 C 8.178972 27.097092 5.7047309 27.429674 4.1796875 27.714844 C 4.1152068 27.214494 4.0638483 26.710021 4.0351562 26.199219 C 5.1622058 26.092262 6.7509972 25.994233 8.8847656 26.021484 z M 41.115234 26.037109 C 43.247527 26.010033 44.835728 26.108156 45.962891 26.214844 C 45.934234 26.718328 45.883749 27.215664 45.820312 27.708984 C 44.24077 27.41921 41.699674 27.086688 38.306641 27.033203 C 38.411945 26.739677 38.499627 26.438219 38.576172 26.132812 C 39.471291 26.084833 40.344564 26.046896 41.115234 26.037109 z M 11.912109 28.019531 C 12.508849 29.215327 13.361516 30.283019 14.488281 31.154297 C 16.028825 32.345531 18.031623 33.177838 20.476562 33.623047 C 20.156699 33.951698 19.86578 34.312595 19.607422 34.693359 L 19.546875 34.640625 C 19.552375 34.634325 19.04975 34.885878 18.298828 34.953125 C 17.547906 35.020374 16.621615 35 15.800781 35 C 14.575781 35 14.03621 34.42121 13.173828 33.367188 C 12.696283 32.72356 12.114101 32.202331 11.548828 31.806641 C 10.970021 31.401475 10.476259 31.115509 9.8652344 31.013672 L 9.7832031 31 L 9.6992188 31 C 9.2325521 31 8.7809835 31.03379 8.359375 31.515625 C 8.1485707 31.756544 8.003277 32.202561 8.0976562 32.580078 C 8.1920352 32.957595 8.4308563 33.189581 8.6445312 33.332031 C 10.011254 34.24318 10.252795 36.046511 11.109375 37.650391 C 11.909298 39.244315 13.635662 40 15.400391 40 L 18 40 L 18 44.802734 C 10.967811 42.320535 5.6646795 36.204613 4.3320312 28.703125 C 5.8629338 28.414776 8.4265387 28.068108 11.912109 28.019531 z M 37.882812 28.027344 C 41.445538 28.05784 44.08105 28.404061 45.669922 28.697266 C 44.339047 36.201504 39.034072 42.31987 32 44.802734 L 32 39.599609 C 32 38.015041 31.479642 36.267712 30.574219 34.810547 C 30.299322 34.368135 29.975945 33.949736 29.615234 33.574219 C 31.930453 33.11684 33.832364 32.298821 35.3125 31.154297 C 36.436824 30.284907 37.287588 29.220424 37.882812 28.027344 z M 23.699219 34.099609 L 26.5 34.099609 C 27.312821 34.099609 28.180423 34.7474 28.875 35.865234 C 29.569577 36.983069 30 38.484177 30 39.599609 L 30 45.398438 C 28.397408 45.789234 26.72379 46 25 46 C 23.27621 46 21.602592 45.789234 20 45.398438 L 20 39.599609 C 20 38.508869 20.467828 37.011307 21.208984 35.888672 C 21.950141 34.766037 22.886398 34.099609 23.699219 34.099609 z M 12.308594 35.28125 C 13.174368 36.179258 14.222525 37 15.800781 37 C 16.579948 37 17.552484 37.028073 18.476562 36.945312 C 18.479848 36.945018 18.483042 36.943654 18.486328 36.943359 C 18.36458 37.293361 18.273744 37.645529 18.197266 38 L 15.400391 38 C 14.167057 38 13.29577 37.55443 12.894531 36.751953 L 12.886719 36.738281 L 12.880859 36.726562 C 12.716457 36.421191 12.500645 35.81059 12.308594 35.28125 z" />
        </svg>
      </Link>
    );
  }
};

type FrameworksDropdownProps = {
  frameworks?: Framework[];
};

const FrameworksDropdown = ({ frameworks }: FrameworksDropdownProps): ReactElement | undefined => {
  if (frameworks && frameworks.length > 0) {
    const frontendFrameworks: Framework[] = frameworks.filter((framework: Framework) => framework.type === "frontend");
    const backendFrameworks: Framework[] = frameworks.filter((framework: Framework) => framework.type === "backend");

    return (
      <div className="group flex h-4 w-11/12 flex-col items-center justify-between rounded-b-md bg-primary/90 shadow-sm shadow-primary transition-all duration-1000 hover:h-[17rem] lg:hover:h-[20rem]">
        <div className="flex h-full w-full justify-between overflow-y-auto px-11 py-6 opacity-0 transition-opacity duration-700 ease-in group-hover:opacity-100 md:px-14 2xl:px-20">
          {frontendFrameworks.length > 0 ? (
            <div>
              <h4 className="text-xl font-bold text-white lg:text-2xl 2xl:text-3xl">Frontend</h4>
              {frontendFrameworks.map((framework: Framework, index: number) => {
                return <Framework key={index} framework={framework} />;
              })}
            </div>
          ) : undefined}
          {backendFrameworks.length > 0 ? (
            <div>
              <h4 className="text-xl font-bold text-white lg:text-2xl 2xl:text-3xl">Backend</h4>
              {backendFrameworks.map((framework: Framework, index: number) => {
                return <Framework key={index} framework={framework} />;
              })}
            </div>
          ) : undefined}
        </div>
        <ChevronDown className="absolute bottom-0 size-4 group-hover:hidden" />
      </div>
    );
  }
};

type FrameworkProps = {
  framework: Framework;
};

const Framework = ({ framework }: FrameworkProps): ReactElement => {
  return (
    <div id={framework.id.toString()} className="ml-2 mt-2 flex items-center gap-2">
      <div className="relative h-5 w-5">
        <Image
          className="origin-center"
          priority={true}
          fill={true}
          sizes="100vw, 100vh"
          src={framework.image}
          alt={framework.name}
        />
      </div>
      <p className="text-sm font-medium text-black lg:text-base 2xl:text-lg">{framework.name}</p>
    </div>
  );
};
